# encoding: UTF-8from log import loggerfrom settings_mongo import *from settings_ctp import *from pymongo import UpdateOneimport datetimeconn[BASE_DB][INSTRUMENT_DB].create_index([(InstrumentID,asc),(ProductID,asc)],background=True)def Save_Instrument_CommissionRate(_list):    _inst_dict = {}    _product_dict = {}    _all = list(conn[BASE_DB][INSTRUMENT_DB].find())    for one in _all:        _inst_dict[one[InstrumentID]] = 1        _product_dict[one[ProductID]] = 1    _next = []    for one in _list:        if one[InstrumentID] in _product_dict:            conn[BASE_DB][INSTRUMENT_DB].update_many({ProductID:one[InstrumentID]},{'$set':one})        else:            _next.append(one)    for one in _next:        if one[InstrumentID] in _inst_dict:            conn[BASE_DB][INSTRUMENT_DB].update_one({InstrumentID:one[InstrumentID]},{'$set':one})        else:            logger.error(u'<font color="red">未发现对应合约 %s</font>'%str(one))def Get_Over_Date(inst_info, shift_days = 30):    _expire_date = inst_info[ExpireDate]    _day = datetime.datetime.strptime(_expire_date, '%Y%m%d')    _over_day = _day - datetime.timedelta(days=shift_days)    _over_date = _over_day.strftime('%Y%m%d')    return _over_datedef Save_Instrument_Info(_dict):    Jobs = []    for inst,info in _dict.items():        info[OverDate] = Get_Over_Date(info)        _job = UpdateOne({InstrumentID:inst},{'$set':info},upsert=True)        Jobs.append(_job)    result = conn[BASE_DB][INSTRUMENT_DB].bulk_write(Jobs)    print('Save_Instrument_Info:',result.bulk_api_result)